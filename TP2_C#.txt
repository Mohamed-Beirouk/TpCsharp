Exercice 1:

1)
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
namespace TPoop
{
    public class Voiture
    {
        private string modele;
        private string marque
        private string couleur;
        private int prix;
        private int puissance;
        public Voiture()
        {
        }
        public Voiture(string modele)
        {
            this.modele = modele;
        }
        public string GetCouleur()
        {
            return this.couleur;
        }
        public int GetPrix()
        {
            return this.prix;
        }
    }
}

2)
Non, on peut pas l'executer, car il ne contient pas la methode Main (La méthode Main est le point d'entrée de chaque application C#)


3)
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace TPoop
{
    public class TestVoiture
    {

        static void Main(string[] args)
        {
            Voiture v1 = new Voiture();

        }

    }
}


4)
public Voiture(int prix, string couleur)
        {
            this.prix = prix;
            this.couleur = couleur;
        }



5)
Voiture v2 = new Voiture(40000,"Noir");

6)
/* nous n'avons pas un attribut marque dans l'ennoncé du TP, c'est seulement l'attribut modele, donc je vais l'ajouté*/
public string GetMarque()
        {
            return this.marque;
        }


v2.GetMarque();

7)
essai: System.Console.Write(v1.puissance);

msg d'eurreur: "readonly struct"  :est inaccesible en raison de son niveau de protection.
car c'est le principe d'encapsulation, l'attribut est privé, et par suite l'accées n'est pas autorisés que dans la classe elle meme par l'une de ces méthodes, 
si on veut utilisé ou modifiés l'un de ces attributs nous somme obligés a utilisé les getters et les setters.

8)
public void SetMarque(string marque)
        {
            this.marque= marque;
        }
        public void SetCouleur(string couleur)
        {
            this.couleur = couleur;
        }

9)
public override string ToString()
        {
            return "" + this.modele + "," + this.couleur + "," + this.prix + "," + this.puissance + ",";
        }

10)
Console.WriteLine(v2);   


11)
 public Boolean Equals(Voiture v)
        {
            return (
            (this.modele == v.modele) &&
            (this.couleur == v.couleur) &&
            (this.prix == v.prix) &&
            (this.puissance == v.puissance) 
            );
        }


12)
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace TPoop
{
    public class VoitureEnSolde : Voiture
    {
        private double remise=0.2; // car il y'a une virgule.

    }
}


13) on doit modifier getPrix() dans la classe voiture car elle sera  surchargeable dans la classe VoitureEnSolde, et par suite GetPrix dans la classe VoitureEnSolde elle va 
écrasé la methode herité de la classe voiture.

dans la classe : voiture :
public virtual int GetPrix()
        {
            return this.prix;
        }

dans la classe VoitureEnSolde:
 public override int GetPrix()
        {

           return (int)(base.GetPrix() - base.GetPrix() * this.remise);

        }






Exercice2:

1)
Question :  une classe, une classe statique et une classe abstraite?
Reponce:
une classe c# est une entité qui détermine les caracteristiques d’un objet exemple (machine, voiture ou person) et son contenu. 

une classe statique c'est une classe comme tous les classes sauf qu'elle est non instancier, elle determine un seul objet connus, l'acces sur ce classe
c'est juste son nom suivie d'un point suivie du nom du methode ou attribut.

Finalement, une classe abstraite peut contenir tous les éléments d’une classe normale, il est utilisé principalement pour l'heritage 
et forcer le devellopeur a implementer ces abstracts méthodes dans les classes fils.


2)

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace TPoop
{
    abstract class Forme
    {
//a)
        protected string couleur;
        protected bool remplie;


//b)
        public string GetCouleur()
        {
            return this.couleur;
        }
        public void SetCouleur(string couleur)
        {
            this.couleur = couleur;
        }
        public bool GetRemplie()
        {
            return this.remplie;
        }
        public void SetRemplie(bool remplie)
        {
            this.remplie = remplie;
        }
        public override string ToString()
        {
            return ""+this.couleur+","+this.remplie;
        }

//c)
        public abstract int getSurface();
        public abstract int getPerimetre();

    }
}

//d + e)

//class cercle + methode ToString:

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace TPoop
{
    public class Cercle : Forme
    {
        private int rayon;

        public override double getSurface()
        {
            return this.rayon * this.rayon * Math.PI;
        }
        public override double getPerimetre()
        {
            return 2 * Math.PI * this.rayon;
        }
        public override string ToString()
        {
            return "" + base.couleur + "," + base.remplie + "," + this.rayon + ",";
        }

    }
}

//class rectangle + methode ToString :

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace TPoop
{
    public class Rectangle : Forme
    {
        private int longeur;
        private int largeur;

        public override double getSurface()
        {
            return this.longeur * this.largeur;
        }
        public override double getPerimetre()
        {
            return (this.longeur + this.largeur) * 2;
        }

        public override string ToString()
        {
            return "" + base.couleur + "," + base.remplie + "," + this.longeur + "," + this.largeur + ",";
        }

    }
}

//3)

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace TPoop
{
    public class TestForme
    {
        //Forme f1 = new Forme();   //impossible de créer une instance de type abstract, donc elle va engadré une eurreur.
        Rectangle r = new Rectangle();  // c'est bon et évident, c'est la methode traditionelle.
        Cercle c = new Cercle();

        Forme f2 = new Rectangle();  //le polymorphisme repose par la déclaration des objets comme étant des objets de la classe de base.
    }
}


